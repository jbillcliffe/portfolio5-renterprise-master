import os
import dj_database_url

# from django_countries.widgets import LazyChoicesMixin
from django.contrib.messages import constants as message_constants
from pathlib import Path

"""
Django settings for renterprise project.

Generated by 'django-admin startproject' using Django 5.1.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = (
    'django-insecure-h2bpb9^4qis^n@4vc1=-a3ym@xk-y_&-3^xw#pmqcz441$(73)'
)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = [
    '8000-jbillcliffe-portfolio5r-prmccqurny4.ws.codeinstitute-ide.net'
]

CSRF_TRUSTED_ORIGINS = [
    "https://*.herokuapp.com",
    "https://*.codeinstitute-ide.net",
    "https://*.stripe.com",
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # 'django.contrib.sites',
    # Apps
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'items',
    'menu',
    'orders',
    'profiles',

    # Add On Packages
    'django_countries',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_bootstrap5',
    'localflavor',
    'storages',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'renterprise.urls'

CRISPY_TEMPLATE_PACK = "bootstrap5"
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'),
            os.path.join(BASE_DIR, 'templates', 'allauth'),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'renterprise.contexts.settings_variables',
            ],
            'builtins': [
                'crispy_forms.templatetags.crispy_forms_tags',
                'crispy_forms.templatetags.crispy_forms_field',
            ]
        },
    },
]

MESSAGE_STORAGE = 'django.contrib.messages.storage.session.SessionStorage'

# Have to define all tags, not just one. This is to override the ERROR
# value to send the tag of danger to a template. Matching Bootstrap's
# wording. This can then be used for variable classes.
MESSAGE_TAGS = {
    message_constants.DEBUG: 'debug',
    message_constants.INFO: 'info',
    message_constants.SUCCESS: 'success',
    message_constants.WARNING: 'warning',
    message_constants.ERROR: 'danger',
}

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',
]

SITE_ID = 1

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'
ACCOUNT_CHANGE_EMAIL = False
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = False
# To prevent brute force attacks 10 attempts per minute per ip
ACCOUNT_RATE_LIMITS = {
    'login': "10/m/ip",
}
ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = '/accounts/login'
ACCOUNT_EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/accounts/login'
ACCOUNT_USERNAME_MIN_LENGTH = 4
LOGIN_URL = '/accounts/login/'  # location to login
LOGIN_REDIRECT_URL = '/'  # redirect after successful login
LOGOUT_REDIRECT_URL = '/'  # redirect after successful logout
WSGI_APPLICATION = 'renterprise.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
if 'DATABASE_URL' in os.environ:
    DATABASES = {
        'default': dj_database_url.parse(os.environ.get("DATABASE_URL"))
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# CUSTOM SETTINGS
# Please note that currently these are non-existent emails and
# phone numbers. The address and company name too are fictional
# and are purely for educational purposes.

COMPANY_NAME = "Renterprise"
INFO_EMAIL = 'Renterprise <info@renterprise.com>'
HELP_EMAIL = 'Renterprise Support <admin@renterprise.com>'
BASIC_INFO_EMAIL = 'info@renterprise.com'
BASIC_HELP_EMAIL = 'admin@renterprise.com'
COMPANY_PHONE = '(+44) 1234 567890'
COMPANY_HELP_PHONE = '(+44) 0987 654321'
COMPANY_ADDRESS = {
    'line_1': 'Renterprise',
    'line_2': 'Here',
    'line_3': '',
    'town': 'In This Town',
    'county': 'And County',
    'postcode': 'RENT PRZ',
    'country': 'United Kingdom'
}
NULL_VALUES = [None, 'None', 'none', 'null', 'Null']



# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/
LANGUAGE_CODE = 'en-gb'
TIME_ZONE = 'UTC'
USE_I18N = True
USE_TZ = True

# Date Formatting
DATE_FORMAT = '%d/%m/%Y'
DATE_INPUT_FORMATS = ['%d/%m/%Y']
DATETIME_FORMAT = '%d/%m/%Y : %H:%M'
DATETIME_INPUT_FORMATS = ['%d/%m/%Y : %H:%M']

# Django Countries
COUNTRIES_ONLY = ["GB"]

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/
STATIC_URL = '/static/'
STATICFILES_DIRS = (os.path.join(BASE_DIR, 'static'),)

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_NO_IMAGE = '/static/images/default.webp'

# if 'USE_AWS' in os.environ is True:
#     # Cache Control
#     AWS_S3_OBJECT_PARAMETERS = {
#         'Expires': 'Thu, 31 Dec 2099 20:00:00 GMT',
#         'CacheControl': 'max-age=94608000',
#     }

#     # Bucket Config
#     AWS_STORAGE_BUCKET_NAME = 'jbill-boutique-ado'
#     AWS_S3_REGION_NAME = 'eu-north-1'
#     AWS_ACCESS_KEY_ID = os.environ.get('AWS_ACCESS_KEY_ID')
#     AWS_SECRET_ACCESS_KEY = os.environ.get('AWS_SECRET_ACCESS_KEY')
#     AWS_S3_CUSTOM_DOMAIN = f'{AWS_STORAGE_BUCKET_NAME}.s3.amazonaws.com'

#     # Static and media files for AWS
#     STATICFILES_STORAGE = 'custom_storages.StaticStorage'
#     STATICFILES_LOCATION = 'static'
#     DEFAULT_FILE_STORAGE = 'custom_storages.MediaStorage'
#     MEDIAFILES_LOCATION = 'media'

#     # Override static and media URLs in production
#     STATIC_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{STATICFILES_LOCATION}/'
#     MEDIA_URL = f'https://{AWS_S3_CUSTOM_DOMAIN}/{MEDIAFILES_LOCATION}/'

# Stripe
STRIPE_CURRENCY = 'gbp'
STRIPE_PUBLIC_KEY = os.getenv('STRIPE_PUBLIC_KEY', '')
STRIPE_SECRET_KEY = os.getenv('STRIPE_SECRET_KEY', '')
STRIPE_WH_SECRET = os.getenv('STRIPE_WH_SECRET', '')


if DEBUG is True:
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
else:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_USE_TLS = True
    EMAIL_PORT = 587
    EMAIL_HOST = 'smtp.gmail.com'
    EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER')
    EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASS')

# DEFAULT_FROM_EMAIL is not custom and is a part of django mail.
# It is also only used, when an email address is not entered.
# https://docs.djangoproject.com/en/5.1/topics/email/#send-mail
# "from_email: A string. If None, Django will use the value of
# the DEFAULT_FROM_EMAIL setting."
# It is needed to be aware, that there are two different email variables
# for the same value. Because, the INFO_EMAIL just allows for a standard
# way for code. DEFAULT is specific to one feature of Django.
DEFAULT_FROM_EMAIL = 'Renterprise <info@renterprise.com>'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
