// Raw javascript is quicker than jQuery, because jQuery executes on top of JS.

KILLING A PORT ----
sudo lsof -t -i tcp:8000 | xargs kill *PID*

https://docs.allauth.org/en/latest/common/admin.html -- !!!! Make Django admin login requires allauth 

https://getbootstrap.com/docs/5.0/layout/z-index/ --- Z-index documentation, was useful to know there were default values
for different bootstrap components!

@login_required is needed, this also means that the user has to have a verified email too. Therefore not needing @verified_email_addres from allauth

PAGINATOR - Prior to moving to grid display. It would centre on the middle item and you could not set a starting column for the text element.
Hence, when there was only left or right. The paginatior would very clearly move, because the middle element 
was an arrow (text/arrow/arrow or arrow/arrow/text). Grid enables a consistent size, even for blank columns, which can be centred in the parent div.

SIDEBAR - For a time, the href and target values were persisting although I believed it should have gone, but, the if/else statement was incorrect, 
then realising target=_self was refreshing the page too. However, with a rescripting in the nav the cursor is not a pointer and it does not have navigation.
This was discovered at the early stages when creating the link for the profiles list.

USER TO FORM FOR AUTHENTICATION ------ 
https://forum.djangoproject.com/t/using-request-user-in-forms-py/19184/2


MULTIPLE FORM LAYOUT + SUBMISSION

# Button outside form
https://til.hashrocket.com/posts/v2s2gxgifj-submit-a-form-with-a-button-outside-the-form#:~:text=You%20can%20tie%20a%20submit,with%20the%20button's%20form%20property.&text=With%20this%20setup%2C%20clicking%20the,Button%20docs%20for%20more%20details.
# LAYOUT - For wrapper class to override provided wrappers for FloatingFields, 
https://django-crispy-forms.readthedocs.io/en/latest/form_helper.html

# Ordering
https://getbootstrap.com/docs/5.3/layout/columns/#order-classes

Buttons were ignoring the ordering (not sure why as they were inside the same parent tag as fields). Instead, took the buttons outside of the form and they render perfectly underneath.
**** FIGURED OUT ****
Bootstrap order class on grid layout has tiers 1 throught to 5 by default, although more can be added. This was discovered after an already working implementation, so no requirement to change.

# Switch button order on screen breakpoint
https://stackoverflow.com/questions/66981371/how-to-use-breakpoints-to-change-bootstrap-columns-grid-ordering

MODEL LEVEL VALIDATION ------
Used in ItemForm
https://docs.djangoproject.com/en/5.1/ref/models/instances/#django.db.models.Model.full_clean

----- PREDICTED ISSUE -----
Django  crispy forms automatically adds "mb-3" to field css class.
The way to override this is by implementing the #id of the element by specificity rules. However, a button that is put inline into the form, needs to not exist when the user is not authorised to edit.
So, the prefix of the fields (eg. ItemForm(prefix="item")) would need to be variable determined by the user.
So if the user is authorised the prefix for the table is "item-edit". These would affect the #id of the element and allow different styling based upon the user. Including not having the button there at all.

--- Button Dropdown BS5 for category history ---
https://getbootstrap.com/docs/5.3/forms/input-group/#buttons-with-dropdowns

--- GETTING ELEMENTS BY JUST ONE CLASS NAME - USED FOR ITEMTYPE EDITS ---
https://stackoverflow.com/questions/19492716/get-elements-with-one-class-but-not-another-without-iterating
Change from getElementsByClassName, to use a querySelectorAll

--- UNIQUE CONSTRAINT ERROR ON FORM SUBMIT ---

The issue is the <form action="">. The action is generated in the view, but if the type is changed then it does not change.
Create a dynamic form action to send the data to a new action url. This will then correspond to the correct type_id.
Issue is, using the original ID, for an ItemType, then the SKU is blocking it as it needs to be unique and you cannot update 
the original type of the edit to have an SKU of a previously selected item. eg:
ITEM - ITEM1
INITIAL - TYPE1 : SKU1
SELECTED - TYPE2 : SKU2
SENT - items/"ITEM1"/type/"TYPE1"/edit

Now in this case, the rest of the data sent relates to TYPE2, including SKU2. So it cannot assign SKU2 to TYPE1 as it already exists
on TYPE2. So the update fails.

--- Creating variables in context to send to a script ---
Used for keeping the Item.id when editing ItemType, to be able to create the form action dynimcally.
https://docs.djangoproject.com/en/5.1/ref/templates/builtins/#json-script


Inline Formset Factory -------------
https://docs.djangoproject.com/en/5.1/topics/forms/modelforms/#inline-formsets
https://www.reddit.com/r/django/comments/z04yuj/how_to_have_children_list_in_parent_model_one_to/#:~:text=When%20you%20set%20a%20ForeignKey,reverse%20relationship%20would%20be%20Parent.
--Create field without saving to model or db --
https://stackoverflow.com/questions/76372367/add-a-select-field-on-django-form-without-saving-on-database

-- Datepicker, just use TextInput widget in DateField to change type.


-- STRIPE SAVE DURING PAYMENT (SAVE FOR FUTURE USE - Ongoing payments)
https://docs.stripe.com/payments/save-during-payment

-- CSS Inline converter
https://templates.mailchimp.com/resources/inline-css/